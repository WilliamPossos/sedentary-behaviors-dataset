package com.example.william.data_set;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.william.data_set.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "POSTURE".
 */
@Entity(active = true)
public class Posture {

    @Id
    private Long id;
    private String posture;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient PostureDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "postureId")
    })
    private List<Activity> activityList;

    @Generated
    public Posture() {
    }

    public Posture(Long id) {
        this.id = id;
    }

    @Generated
    public Posture(Long id, String posture) {
        this.id = id;
        this.posture = posture;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPosture() {
        return posture;
    }

    public void setPosture(String posture) {
        this.posture = posture;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Activity> getActivityList() {
        if (activityList == null) {
            __throwIfDetached();
            ActivityDao targetDao = daoSession.getActivityDao();
            List<Activity> activityListNew = targetDao._queryPosture_ActivityList(id);
            synchronized (this) {
                if(activityList == null) {
                    activityList = activityListNew;
                }
            }
        }
        return activityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetActivityList() {
        activityList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
