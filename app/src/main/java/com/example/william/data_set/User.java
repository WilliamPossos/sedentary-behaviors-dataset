package com.example.william.data_set;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.william.data_set.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "USER".
 */
@Entity(active = true)
public class User {

    @Id(autoincrement = true)
    private Long id;
    private String name;
    private String lastname;
    private String username;
    private Integer age;
    private String gender;
    private Integer weight;
    private Integer stature;
    private String profession;
    private String mail;
    private Integer waist;
    private String smokeFrec;
    private String drinkFrec;
    private String transport;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UserDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<Activity> activityList;

    @Generated
    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    @Generated
    public User(Long id, String name, String lastname, String username, Integer age, String gender, Integer weight, Integer stature, String profession, String mail, Integer waist, String smokeFrec, String drinkFrec, String transport) {
        this.id = id;
        this.name = name;
        this.lastname = lastname;
        this.username = username;
        this.age = age;
        this.gender = gender;
        this.weight = weight;
        this.stature = stature;
        this.profession = profession;
        this.mail = mail;
        this.waist = waist;
        this.smokeFrec = smokeFrec;
        this.drinkFrec = drinkFrec;
        this.transport = transport;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public Integer getWeight() {
        return weight;
    }

    public void setWeight(Integer weight) {
        this.weight = weight;
    }

    public Integer getStature() {
        return stature;
    }

    public void setStature(Integer stature) {
        this.stature = stature;
    }

    public String getProfession() {
        return profession;
    }

    public void setProfession(String profession) {
        this.profession = profession;
    }

    public String getMail() {
        return mail;
    }

    public void setMail(String mail) {
        this.mail = mail;
    }

    public Integer getWaist() {
        return waist;
    }

    public void setWaist(Integer waist) {
        this.waist = waist;
    }

    public String getSmokeFrec() {
        return smokeFrec;
    }

    public void setSmokeFrec(String smokeFrec) {
        this.smokeFrec = smokeFrec;
    }

    public String getDrinkFrec() {
        return drinkFrec;
    }

    public void setDrinkFrec(String drinkFrec) {
        this.drinkFrec = drinkFrec;
    }

    public String getTransport() {
        return transport;
    }

    public void setTransport(String transport) {
        this.transport = transport;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Activity> getActivityList() {
        if (activityList == null) {
            __throwIfDetached();
            ActivityDao targetDao = daoSession.getActivityDao();
            List<Activity> activityListNew = targetDao._queryUser_ActivityList(id);
            synchronized (this) {
                if(activityList == null) {
                    activityList = activityListNew;
                }
            }
        }
        return activityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetActivityList() {
        activityList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
