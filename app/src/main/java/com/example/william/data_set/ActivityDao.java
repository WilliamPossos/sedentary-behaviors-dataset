package com.example.william.data_set;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVITY".
*/
public class ActivityDao extends AbstractDao<Activity, Long> {

    public static final String TABLENAME = "ACTIVITY";

    /**
     * Properties of entity Activity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property ActionId = new Property(3, long.class, "actionId", false, "ACTION_ID");
        public final static Property LocationId = new Property(4, long.class, "locationId", false, "LOCATION_ID");
        public final static Property PostureId = new Property(5, long.class, "postureId", false, "POSTURE_ID");
    }

    private DaoSession daoSession;

    private Query<Activity> user_ActivityListQuery;
    private Query<Activity> action_ActivityListQuery;
    private Query<Activity> location_ActivityListQuery;
    private Query<Activity> posture_ActivityListQuery;

    public ActivityDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"ACTION_ID\" INTEGER NOT NULL ," + // 3: actionId
                "\"LOCATION_ID\" INTEGER NOT NULL ," + // 4: locationId
                "\"POSTURE_ID\" INTEGER NOT NULL );"); // 5: postureId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
        stmt.bindLong(3, entity.getUserId());
        stmt.bindLong(4, entity.getActionId());
        stmt.bindLong(5, entity.getLocationId());
        stmt.bindLong(6, entity.getPostureId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
        stmt.bindLong(3, entity.getUserId());
        stmt.bindLong(4, entity.getActionId());
        stmt.bindLong(5, entity.getLocationId());
        stmt.bindLong(6, entity.getPostureId());
    }

    @Override
    protected final void attachEntity(Activity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Activity readEntity(Cursor cursor, int offset) {
        Activity entity = new Activity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.getLong(offset + 2), // userId
            cursor.getLong(offset + 3), // actionId
            cursor.getLong(offset + 4), // locationId
            cursor.getLong(offset + 5) // postureId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Activity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setActionId(cursor.getLong(offset + 3));
        entity.setLocationId(cursor.getLong(offset + 4));
        entity.setPostureId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Activity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Activity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Activity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "activityList" to-many relationship of User. */
    public List<Activity> _queryUser_ActivityList(long userId) {
        synchronized (this) {
            if (user_ActivityListQuery == null) {
                QueryBuilder<Activity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_ActivityListQuery = queryBuilder.build();
            }
        }
        Query<Activity> query = user_ActivityListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "activityList" to-many relationship of Action. */
    public List<Activity> _queryAction_ActivityList(long actionId) {
        synchronized (this) {
            if (action_ActivityListQuery == null) {
                QueryBuilder<Activity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ActionId.eq(null));
                action_ActivityListQuery = queryBuilder.build();
            }
        }
        Query<Activity> query = action_ActivityListQuery.forCurrentThread();
        query.setParameter(0, actionId);
        return query.list();
    }

    /** Internal query to resolve the "activityList" to-many relationship of Location. */
    public List<Activity> _queryLocation_ActivityList(long locationId) {
        synchronized (this) {
            if (location_ActivityListQuery == null) {
                QueryBuilder<Activity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LocationId.eq(null));
                location_ActivityListQuery = queryBuilder.build();
            }
        }
        Query<Activity> query = location_ActivityListQuery.forCurrentThread();
        query.setParameter(0, locationId);
        return query.list();
    }

    /** Internal query to resolve the "activityList" to-many relationship of Posture. */
    public List<Activity> _queryPosture_ActivityList(long postureId) {
        synchronized (this) {
            if (posture_ActivityListQuery == null) {
                QueryBuilder<Activity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PostureId.eq(null));
                posture_ActivityListQuery = queryBuilder.build();
            }
        }
        Query<Activity> query = posture_ActivityListQuery.forCurrentThread();
        query.setParameter(0, postureId);
        return query.list();
    }

}
