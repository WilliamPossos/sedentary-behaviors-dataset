package com.example.william.data_set;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DATA".
*/
public class UserDataDao extends AbstractDao<UserData, Long> {

    public static final String TABLENAME = "USER_DATA";

    /**
     * Properties of entity UserData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property BandAccX = new Property(2, Double.class, "bandAccX", false, "BAND_ACC_X");
        public final static Property BandAccY = new Property(3, Double.class, "bandAccY", false, "BAND_ACC_Y");
        public final static Property BandAccZ = new Property(4, Double.class, "bandAccZ", false, "BAND_ACC_Z");
        public final static Property BandAltimeterRate = new Property(5, Float.class, "bandAltimeterRate", false, "BAND_ALTIMETER_RATE");
        public final static Property BandAmbientLight = new Property(6, Integer.class, "bandAmbientLight", false, "BAND_AMBIENT_LIGHT");
        public final static Property BandBarometerAir = new Property(7, Double.class, "bandBarometerAir", false, "BAND_BAROMETER_AIR");
        public final static Property BandBarometerTemp = new Property(8, Double.class, "bandBarometerTemp", false, "BAND_BAROMETER_TEMP");
        public final static Property BandGsr = new Property(9, Integer.class, "bandGsr", false, "BAND_GSR");
        public final static Property BandGyrX = new Property(10, Double.class, "bandGyrX", false, "BAND_GYR_X");
        public final static Property BandGyrY = new Property(11, Double.class, "bandGyrY", false, "BAND_GYR_Y");
        public final static Property BandGyrZ = new Property(12, Double.class, "bandGyrZ", false, "BAND_GYR_Z");
        public final static Property BandHeartRate = new Property(13, Integer.class, "bandHeartRate", false, "BAND_HEART_RATE");
        public final static Property BandQoHR = new Property(14, String.class, "bandQoHR", false, "BAND_QO_HR");
        public final static Property BandPedometer = new Property(15, Long.class, "bandPedometer", false, "BAND_PEDOMETER");
        public final static Property BandRR = new Property(16, Double.class, "bandRR", false, "BAND_RR");
        public final static Property BandSkinTemperature = new Property(17, Double.class, "bandSkinTemperature", false, "BAND_SKIN_TEMPERATURE");
        public final static Property BandUVindex = new Property(18, String.class, "bandUVindex", false, "BAND_UVINDEX");
        public final static Property MobileAccX = new Property(19, Float.class, "mobileAccX", false, "MOBILE_ACC_X");
        public final static Property MobileAccY = new Property(20, Float.class, "mobileAccY", false, "MOBILE_ACC_Y");
        public final static Property MobileAccZ = new Property(21, Float.class, "mobileAccZ", false, "MOBILE_ACC_Z");
        public final static Property MobileGyrX = new Property(22, Float.class, "mobileGyrX", false, "MOBILE_GYR_X");
        public final static Property MobileGyrY = new Property(23, Float.class, "mobileGyrY", false, "MOBILE_GYR_Y");
        public final static Property MobileGyrZ = new Property(24, Float.class, "mobileGyrZ", false, "MOBILE_GYR_Z");
        public final static Property MobileMagX = new Property(25, Float.class, "mobileMagX", false, "MOBILE_MAG_X");
        public final static Property MobileMagY = new Property(26, Float.class, "mobileMagY", false, "MOBILE_MAG_Y");
        public final static Property MobileMagZ = new Property(27, Float.class, "mobileMagZ", false, "MOBILE_MAG_Z");
        public final static Property MobileGraX = new Property(28, Float.class, "mobileGraX", false, "MOBILE_GRA_X");
        public final static Property MobileGraY = new Property(29, Float.class, "mobileGraY", false, "MOBILE_GRA_Y");
        public final static Property MobileGraZ = new Property(30, Float.class, "mobileGraZ", false, "MOBILE_GRA_Z");
        public final static Property MobileLinX = new Property(31, Float.class, "mobileLinX", false, "MOBILE_LIN_X");
        public final static Property MobileLinY = new Property(32, Float.class, "mobileLinY", false, "MOBILE_LIN_Y");
        public final static Property MobileLinZ = new Property(33, Float.class, "mobileLinZ", false, "MOBILE_LIN_Z");
        public final static Property MobileRotX = new Property(34, Float.class, "mobileRotX", false, "MOBILE_ROT_X");
        public final static Property MobileRotY = new Property(35, Float.class, "mobileRotY", false, "MOBILE_ROT_Y");
        public final static Property MobileRotZ = new Property(36, Float.class, "mobileRotZ", false, "MOBILE_ROT_Z");
        public final static Property MBarometer = new Property(37, Float.class, "mBarometer", false, "M_BAROMETER");
        public final static Property IceBeacon = new Property(38, Integer.class, "iceBeacon", false, "ICE_BEACON");
        public final static Property MintBeacon = new Property(39, Integer.class, "mintBeacon", false, "MINT_BEACON");
        public final static Property BbBeacon = new Property(40, Integer.class, "bbBeacon", false, "BB_BEACON");
        public final static Property IceBeacon2 = new Property(41, Integer.class, "iceBeacon2", false, "ICE_BEACON2");
        public final static Property MintBeacon2 = new Property(42, Integer.class, "mintBeacon2", false, "MINT_BEACON2");
        public final static Property BbBeacon2 = new Property(43, Integer.class, "bbBeacon2", false, "BB_BEACON2");
        public final static Property ActivityId = new Property(44, long.class, "activityId", false, "ACTIVITY_ID");
    }

    private Query<UserData> activity_UserDataListQuery;

    public UserDataDao(DaoConfig config) {
        super(config);
    }
    
    public UserDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIMESTAMP\" INTEGER," + // 1: timestamp
                "\"BAND_ACC_X\" REAL," + // 2: bandAccX
                "\"BAND_ACC_Y\" REAL," + // 3: bandAccY
                "\"BAND_ACC_Z\" REAL," + // 4: bandAccZ
                "\"BAND_ALTIMETER_RATE\" REAL," + // 5: bandAltimeterRate
                "\"BAND_AMBIENT_LIGHT\" INTEGER," + // 6: bandAmbientLight
                "\"BAND_BAROMETER_AIR\" REAL," + // 7: bandBarometerAir
                "\"BAND_BAROMETER_TEMP\" REAL," + // 8: bandBarometerTemp
                "\"BAND_GSR\" INTEGER," + // 9: bandGsr
                "\"BAND_GYR_X\" REAL," + // 10: bandGyrX
                "\"BAND_GYR_Y\" REAL," + // 11: bandGyrY
                "\"BAND_GYR_Z\" REAL," + // 12: bandGyrZ
                "\"BAND_HEART_RATE\" INTEGER," + // 13: bandHeartRate
                "\"BAND_QO_HR\" TEXT," + // 14: bandQoHR
                "\"BAND_PEDOMETER\" INTEGER," + // 15: bandPedometer
                "\"BAND_RR\" REAL," + // 16: bandRR
                "\"BAND_SKIN_TEMPERATURE\" REAL," + // 17: bandSkinTemperature
                "\"BAND_UVINDEX\" TEXT," + // 18: bandUVindex
                "\"MOBILE_ACC_X\" REAL," + // 19: mobileAccX
                "\"MOBILE_ACC_Y\" REAL," + // 20: mobileAccY
                "\"MOBILE_ACC_Z\" REAL," + // 21: mobileAccZ
                "\"MOBILE_GYR_X\" REAL," + // 22: mobileGyrX
                "\"MOBILE_GYR_Y\" REAL," + // 23: mobileGyrY
                "\"MOBILE_GYR_Z\" REAL," + // 24: mobileGyrZ
                "\"MOBILE_MAG_X\" REAL," + // 25: mobileMagX
                "\"MOBILE_MAG_Y\" REAL," + // 26: mobileMagY
                "\"MOBILE_MAG_Z\" REAL," + // 27: mobileMagZ
                "\"MOBILE_GRA_X\" REAL," + // 28: mobileGraX
                "\"MOBILE_GRA_Y\" REAL," + // 29: mobileGraY
                "\"MOBILE_GRA_Z\" REAL," + // 30: mobileGraZ
                "\"MOBILE_LIN_X\" REAL," + // 31: mobileLinX
                "\"MOBILE_LIN_Y\" REAL," + // 32: mobileLinY
                "\"MOBILE_LIN_Z\" REAL," + // 33: mobileLinZ
                "\"MOBILE_ROT_X\" REAL," + // 34: mobileRotX
                "\"MOBILE_ROT_Y\" REAL," + // 35: mobileRotY
                "\"MOBILE_ROT_Z\" REAL," + // 36: mobileRotZ
                "\"M_BAROMETER\" REAL," + // 37: mBarometer
                "\"ICE_BEACON\" INTEGER," + // 38: iceBeacon
                "\"MINT_BEACON\" INTEGER," + // 39: mintBeacon
                "\"BB_BEACON\" INTEGER," + // 40: bbBeacon
                "\"ICE_BEACON2\" INTEGER," + // 41: iceBeacon2
                "\"MINT_BEACON2\" INTEGER," + // 42: mintBeacon2
                "\"BB_BEACON2\" INTEGER," + // 43: bbBeacon2
                "\"ACTIVITY_ID\" INTEGER NOT NULL );"); // 44: activityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }
 
        Double bandAccX = entity.getBandAccX();
        if (bandAccX != null) {
            stmt.bindDouble(3, bandAccX);
        }
 
        Double bandAccY = entity.getBandAccY();
        if (bandAccY != null) {
            stmt.bindDouble(4, bandAccY);
        }
 
        Double bandAccZ = entity.getBandAccZ();
        if (bandAccZ != null) {
            stmt.bindDouble(5, bandAccZ);
        }
 
        Float bandAltimeterRate = entity.getBandAltimeterRate();
        if (bandAltimeterRate != null) {
            stmt.bindDouble(6, bandAltimeterRate);
        }
 
        Integer bandAmbientLight = entity.getBandAmbientLight();
        if (bandAmbientLight != null) {
            stmt.bindLong(7, bandAmbientLight);
        }
 
        Double bandBarometerAir = entity.getBandBarometerAir();
        if (bandBarometerAir != null) {
            stmt.bindDouble(8, bandBarometerAir);
        }
 
        Double bandBarometerTemp = entity.getBandBarometerTemp();
        if (bandBarometerTemp != null) {
            stmt.bindDouble(9, bandBarometerTemp);
        }
 
        Integer bandGsr = entity.getBandGsr();
        if (bandGsr != null) {
            stmt.bindLong(10, bandGsr);
        }
 
        Double bandGyrX = entity.getBandGyrX();
        if (bandGyrX != null) {
            stmt.bindDouble(11, bandGyrX);
        }
 
        Double bandGyrY = entity.getBandGyrY();
        if (bandGyrY != null) {
            stmt.bindDouble(12, bandGyrY);
        }
 
        Double bandGyrZ = entity.getBandGyrZ();
        if (bandGyrZ != null) {
            stmt.bindDouble(13, bandGyrZ);
        }
 
        Integer bandHeartRate = entity.getBandHeartRate();
        if (bandHeartRate != null) {
            stmt.bindLong(14, bandHeartRate);
        }
 
        String bandQoHR = entity.getBandQoHR();
        if (bandQoHR != null) {
            stmt.bindString(15, bandQoHR);
        }
 
        Long bandPedometer = entity.getBandPedometer();
        if (bandPedometer != null) {
            stmt.bindLong(16, bandPedometer);
        }
 
        Double bandRR = entity.getBandRR();
        if (bandRR != null) {
            stmt.bindDouble(17, bandRR);
        }
 
        Double bandSkinTemperature = entity.getBandSkinTemperature();
        if (bandSkinTemperature != null) {
            stmt.bindDouble(18, bandSkinTemperature);
        }
 
        String bandUVindex = entity.getBandUVindex();
        if (bandUVindex != null) {
            stmt.bindString(19, bandUVindex);
        }
 
        Float mobileAccX = entity.getMobileAccX();
        if (mobileAccX != null) {
            stmt.bindDouble(20, mobileAccX);
        }
 
        Float mobileAccY = entity.getMobileAccY();
        if (mobileAccY != null) {
            stmt.bindDouble(21, mobileAccY);
        }
 
        Float mobileAccZ = entity.getMobileAccZ();
        if (mobileAccZ != null) {
            stmt.bindDouble(22, mobileAccZ);
        }
 
        Float mobileGyrX = entity.getMobileGyrX();
        if (mobileGyrX != null) {
            stmt.bindDouble(23, mobileGyrX);
        }
 
        Float mobileGyrY = entity.getMobileGyrY();
        if (mobileGyrY != null) {
            stmt.bindDouble(24, mobileGyrY);
        }
 
        Float mobileGyrZ = entity.getMobileGyrZ();
        if (mobileGyrZ != null) {
            stmt.bindDouble(25, mobileGyrZ);
        }
 
        Float mobileMagX = entity.getMobileMagX();
        if (mobileMagX != null) {
            stmt.bindDouble(26, mobileMagX);
        }
 
        Float mobileMagY = entity.getMobileMagY();
        if (mobileMagY != null) {
            stmt.bindDouble(27, mobileMagY);
        }
 
        Float mobileMagZ = entity.getMobileMagZ();
        if (mobileMagZ != null) {
            stmt.bindDouble(28, mobileMagZ);
        }
 
        Float mobileGraX = entity.getMobileGraX();
        if (mobileGraX != null) {
            stmt.bindDouble(29, mobileGraX);
        }
 
        Float mobileGraY = entity.getMobileGraY();
        if (mobileGraY != null) {
            stmt.bindDouble(30, mobileGraY);
        }
 
        Float mobileGraZ = entity.getMobileGraZ();
        if (mobileGraZ != null) {
            stmt.bindDouble(31, mobileGraZ);
        }
 
        Float mobileLinX = entity.getMobileLinX();
        if (mobileLinX != null) {
            stmt.bindDouble(32, mobileLinX);
        }
 
        Float mobileLinY = entity.getMobileLinY();
        if (mobileLinY != null) {
            stmt.bindDouble(33, mobileLinY);
        }
 
        Float mobileLinZ = entity.getMobileLinZ();
        if (mobileLinZ != null) {
            stmt.bindDouble(34, mobileLinZ);
        }
 
        Float mobileRotX = entity.getMobileRotX();
        if (mobileRotX != null) {
            stmt.bindDouble(35, mobileRotX);
        }
 
        Float mobileRotY = entity.getMobileRotY();
        if (mobileRotY != null) {
            stmt.bindDouble(36, mobileRotY);
        }
 
        Float mobileRotZ = entity.getMobileRotZ();
        if (mobileRotZ != null) {
            stmt.bindDouble(37, mobileRotZ);
        }
 
        Float mBarometer = entity.getMBarometer();
        if (mBarometer != null) {
            stmt.bindDouble(38, mBarometer);
        }
 
        Integer iceBeacon = entity.getIceBeacon();
        if (iceBeacon != null) {
            stmt.bindLong(39, iceBeacon);
        }
 
        Integer mintBeacon = entity.getMintBeacon();
        if (mintBeacon != null) {
            stmt.bindLong(40, mintBeacon);
        }
 
        Integer bbBeacon = entity.getBbBeacon();
        if (bbBeacon != null) {
            stmt.bindLong(41, bbBeacon);
        }
 
        Integer iceBeacon2 = entity.getIceBeacon2();
        if (iceBeacon2 != null) {
            stmt.bindLong(42, iceBeacon2);
        }
 
        Integer mintBeacon2 = entity.getMintBeacon2();
        if (mintBeacon2 != null) {
            stmt.bindLong(43, mintBeacon2);
        }
 
        Integer bbBeacon2 = entity.getBbBeacon2();
        if (bbBeacon2 != null) {
            stmt.bindLong(44, bbBeacon2);
        }
        stmt.bindLong(45, entity.getActivityId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }
 
        Double bandAccX = entity.getBandAccX();
        if (bandAccX != null) {
            stmt.bindDouble(3, bandAccX);
        }
 
        Double bandAccY = entity.getBandAccY();
        if (bandAccY != null) {
            stmt.bindDouble(4, bandAccY);
        }
 
        Double bandAccZ = entity.getBandAccZ();
        if (bandAccZ != null) {
            stmt.bindDouble(5, bandAccZ);
        }
 
        Float bandAltimeterRate = entity.getBandAltimeterRate();
        if (bandAltimeterRate != null) {
            stmt.bindDouble(6, bandAltimeterRate);
        }
 
        Integer bandAmbientLight = entity.getBandAmbientLight();
        if (bandAmbientLight != null) {
            stmt.bindLong(7, bandAmbientLight);
        }
 
        Double bandBarometerAir = entity.getBandBarometerAir();
        if (bandBarometerAir != null) {
            stmt.bindDouble(8, bandBarometerAir);
        }
 
        Double bandBarometerTemp = entity.getBandBarometerTemp();
        if (bandBarometerTemp != null) {
            stmt.bindDouble(9, bandBarometerTemp);
        }
 
        Integer bandGsr = entity.getBandGsr();
        if (bandGsr != null) {
            stmt.bindLong(10, bandGsr);
        }
 
        Double bandGyrX = entity.getBandGyrX();
        if (bandGyrX != null) {
            stmt.bindDouble(11, bandGyrX);
        }
 
        Double bandGyrY = entity.getBandGyrY();
        if (bandGyrY != null) {
            stmt.bindDouble(12, bandGyrY);
        }
 
        Double bandGyrZ = entity.getBandGyrZ();
        if (bandGyrZ != null) {
            stmt.bindDouble(13, bandGyrZ);
        }
 
        Integer bandHeartRate = entity.getBandHeartRate();
        if (bandHeartRate != null) {
            stmt.bindLong(14, bandHeartRate);
        }
 
        String bandQoHR = entity.getBandQoHR();
        if (bandQoHR != null) {
            stmt.bindString(15, bandQoHR);
        }
 
        Long bandPedometer = entity.getBandPedometer();
        if (bandPedometer != null) {
            stmt.bindLong(16, bandPedometer);
        }
 
        Double bandRR = entity.getBandRR();
        if (bandRR != null) {
            stmt.bindDouble(17, bandRR);
        }
 
        Double bandSkinTemperature = entity.getBandSkinTemperature();
        if (bandSkinTemperature != null) {
            stmt.bindDouble(18, bandSkinTemperature);
        }
 
        String bandUVindex = entity.getBandUVindex();
        if (bandUVindex != null) {
            stmt.bindString(19, bandUVindex);
        }
 
        Float mobileAccX = entity.getMobileAccX();
        if (mobileAccX != null) {
            stmt.bindDouble(20, mobileAccX);
        }
 
        Float mobileAccY = entity.getMobileAccY();
        if (mobileAccY != null) {
            stmt.bindDouble(21, mobileAccY);
        }
 
        Float mobileAccZ = entity.getMobileAccZ();
        if (mobileAccZ != null) {
            stmt.bindDouble(22, mobileAccZ);
        }
 
        Float mobileGyrX = entity.getMobileGyrX();
        if (mobileGyrX != null) {
            stmt.bindDouble(23, mobileGyrX);
        }
 
        Float mobileGyrY = entity.getMobileGyrY();
        if (mobileGyrY != null) {
            stmt.bindDouble(24, mobileGyrY);
        }
 
        Float mobileGyrZ = entity.getMobileGyrZ();
        if (mobileGyrZ != null) {
            stmt.bindDouble(25, mobileGyrZ);
        }
 
        Float mobileMagX = entity.getMobileMagX();
        if (mobileMagX != null) {
            stmt.bindDouble(26, mobileMagX);
        }
 
        Float mobileMagY = entity.getMobileMagY();
        if (mobileMagY != null) {
            stmt.bindDouble(27, mobileMagY);
        }
 
        Float mobileMagZ = entity.getMobileMagZ();
        if (mobileMagZ != null) {
            stmt.bindDouble(28, mobileMagZ);
        }
 
        Float mobileGraX = entity.getMobileGraX();
        if (mobileGraX != null) {
            stmt.bindDouble(29, mobileGraX);
        }
 
        Float mobileGraY = entity.getMobileGraY();
        if (mobileGraY != null) {
            stmt.bindDouble(30, mobileGraY);
        }
 
        Float mobileGraZ = entity.getMobileGraZ();
        if (mobileGraZ != null) {
            stmt.bindDouble(31, mobileGraZ);
        }
 
        Float mobileLinX = entity.getMobileLinX();
        if (mobileLinX != null) {
            stmt.bindDouble(32, mobileLinX);
        }
 
        Float mobileLinY = entity.getMobileLinY();
        if (mobileLinY != null) {
            stmt.bindDouble(33, mobileLinY);
        }
 
        Float mobileLinZ = entity.getMobileLinZ();
        if (mobileLinZ != null) {
            stmt.bindDouble(34, mobileLinZ);
        }
 
        Float mobileRotX = entity.getMobileRotX();
        if (mobileRotX != null) {
            stmt.bindDouble(35, mobileRotX);
        }
 
        Float mobileRotY = entity.getMobileRotY();
        if (mobileRotY != null) {
            stmt.bindDouble(36, mobileRotY);
        }
 
        Float mobileRotZ = entity.getMobileRotZ();
        if (mobileRotZ != null) {
            stmt.bindDouble(37, mobileRotZ);
        }
 
        Float mBarometer = entity.getMBarometer();
        if (mBarometer != null) {
            stmt.bindDouble(38, mBarometer);
        }
 
        Integer iceBeacon = entity.getIceBeacon();
        if (iceBeacon != null) {
            stmt.bindLong(39, iceBeacon);
        }
 
        Integer mintBeacon = entity.getMintBeacon();
        if (mintBeacon != null) {
            stmt.bindLong(40, mintBeacon);
        }
 
        Integer bbBeacon = entity.getBbBeacon();
        if (bbBeacon != null) {
            stmt.bindLong(41, bbBeacon);
        }
 
        Integer iceBeacon2 = entity.getIceBeacon2();
        if (iceBeacon2 != null) {
            stmt.bindLong(42, iceBeacon2);
        }
 
        Integer mintBeacon2 = entity.getMintBeacon2();
        if (mintBeacon2 != null) {
            stmt.bindLong(43, mintBeacon2);
        }
 
        Integer bbBeacon2 = entity.getBbBeacon2();
        if (bbBeacon2 != null) {
            stmt.bindLong(44, bbBeacon2);
        }
        stmt.bindLong(45, entity.getActivityId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserData readEntity(Cursor cursor, int offset) {
        UserData entity = new UserData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // bandAccX
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // bandAccY
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // bandAccZ
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // bandAltimeterRate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // bandAmbientLight
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // bandBarometerAir
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // bandBarometerTemp
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // bandGsr
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // bandGyrX
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // bandGyrY
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // bandGyrZ
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // bandHeartRate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // bandQoHR
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // bandPedometer
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // bandRR
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // bandSkinTemperature
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bandUVindex
            cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19), // mobileAccX
            cursor.isNull(offset + 20) ? null : cursor.getFloat(offset + 20), // mobileAccY
            cursor.isNull(offset + 21) ? null : cursor.getFloat(offset + 21), // mobileAccZ
            cursor.isNull(offset + 22) ? null : cursor.getFloat(offset + 22), // mobileGyrX
            cursor.isNull(offset + 23) ? null : cursor.getFloat(offset + 23), // mobileGyrY
            cursor.isNull(offset + 24) ? null : cursor.getFloat(offset + 24), // mobileGyrZ
            cursor.isNull(offset + 25) ? null : cursor.getFloat(offset + 25), // mobileMagX
            cursor.isNull(offset + 26) ? null : cursor.getFloat(offset + 26), // mobileMagY
            cursor.isNull(offset + 27) ? null : cursor.getFloat(offset + 27), // mobileMagZ
            cursor.isNull(offset + 28) ? null : cursor.getFloat(offset + 28), // mobileGraX
            cursor.isNull(offset + 29) ? null : cursor.getFloat(offset + 29), // mobileGraY
            cursor.isNull(offset + 30) ? null : cursor.getFloat(offset + 30), // mobileGraZ
            cursor.isNull(offset + 31) ? null : cursor.getFloat(offset + 31), // mobileLinX
            cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32), // mobileLinY
            cursor.isNull(offset + 33) ? null : cursor.getFloat(offset + 33), // mobileLinZ
            cursor.isNull(offset + 34) ? null : cursor.getFloat(offset + 34), // mobileRotX
            cursor.isNull(offset + 35) ? null : cursor.getFloat(offset + 35), // mobileRotY
            cursor.isNull(offset + 36) ? null : cursor.getFloat(offset + 36), // mobileRotZ
            cursor.isNull(offset + 37) ? null : cursor.getFloat(offset + 37), // mBarometer
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // iceBeacon
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // mintBeacon
            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // bbBeacon
            cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41), // iceBeacon2
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // mintBeacon2
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // bbBeacon2
            cursor.getLong(offset + 44) // activityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBandAccX(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setBandAccY(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setBandAccZ(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setBandAltimeterRate(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setBandAmbientLight(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBandBarometerAir(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setBandBarometerTemp(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBandGsr(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBandGyrX(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setBandGyrY(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setBandGyrZ(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setBandHeartRate(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setBandQoHR(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBandPedometer(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setBandRR(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setBandSkinTemperature(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setBandUVindex(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMobileAccX(cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19));
        entity.setMobileAccY(cursor.isNull(offset + 20) ? null : cursor.getFloat(offset + 20));
        entity.setMobileAccZ(cursor.isNull(offset + 21) ? null : cursor.getFloat(offset + 21));
        entity.setMobileGyrX(cursor.isNull(offset + 22) ? null : cursor.getFloat(offset + 22));
        entity.setMobileGyrY(cursor.isNull(offset + 23) ? null : cursor.getFloat(offset + 23));
        entity.setMobileGyrZ(cursor.isNull(offset + 24) ? null : cursor.getFloat(offset + 24));
        entity.setMobileMagX(cursor.isNull(offset + 25) ? null : cursor.getFloat(offset + 25));
        entity.setMobileMagY(cursor.isNull(offset + 26) ? null : cursor.getFloat(offset + 26));
        entity.setMobileMagZ(cursor.isNull(offset + 27) ? null : cursor.getFloat(offset + 27));
        entity.setMobileGraX(cursor.isNull(offset + 28) ? null : cursor.getFloat(offset + 28));
        entity.setMobileGraY(cursor.isNull(offset + 29) ? null : cursor.getFloat(offset + 29));
        entity.setMobileGraZ(cursor.isNull(offset + 30) ? null : cursor.getFloat(offset + 30));
        entity.setMobileLinX(cursor.isNull(offset + 31) ? null : cursor.getFloat(offset + 31));
        entity.setMobileLinY(cursor.isNull(offset + 32) ? null : cursor.getFloat(offset + 32));
        entity.setMobileLinZ(cursor.isNull(offset + 33) ? null : cursor.getFloat(offset + 33));
        entity.setMobileRotX(cursor.isNull(offset + 34) ? null : cursor.getFloat(offset + 34));
        entity.setMobileRotY(cursor.isNull(offset + 35) ? null : cursor.getFloat(offset + 35));
        entity.setMobileRotZ(cursor.isNull(offset + 36) ? null : cursor.getFloat(offset + 36));
        entity.setMBarometer(cursor.isNull(offset + 37) ? null : cursor.getFloat(offset + 37));
        entity.setIceBeacon(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setMintBeacon(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setBbBeacon(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setIceBeacon2(cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41));
        entity.setMintBeacon2(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setBbBeacon2(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setActivityId(cursor.getLong(offset + 44));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userDataList" to-many relationship of Activity. */
    public List<UserData> _queryActivity_UserDataList(long activityId) {
        synchronized (this) {
            if (activity_UserDataListQuery == null) {
                QueryBuilder<UserData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ActivityId.eq(null));
                activity_UserDataListQuery = queryBuilder.build();
            }
        }
        Query<UserData> query = activity_UserDataListQuery.forCurrentThread();
        query.setParameter(0, activityId);
        return query.list();
    }

}
